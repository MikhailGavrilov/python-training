# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__, __truediv__()). Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
class Cell:
    def __init__(self, wol):
        self.wol = wol

    def __add__(self, other):
        return Cell(self.wol - other + other.wol)

    def __sub__(selfself, other):
        return Cell(self.wol - other.wol) if self.wol - other.wol >= 0 \
            else f'Операция не допустимаю Разность меньше нуля'

    def mul__(self, other):
        return Cell(self.wol * other.wol)

    def __floordiv__(self, other):
        return Cell(self.wol // other.wol)

    def __truediv__(self, other):
        return Cell(self.wol // other.wol)

    def make_order(self, n):
        for _ in range(self.wol // n):
            print('*' * n)
        print('*' * (self.wol % n))



"""Объявление объектов класса Cell"""
a = Cell(12)
b = Cell(13)
c = Cell(5)


"""Демонстрация работы перегруженных операторов класса Cell"""
print((a + b).wol)  # 125
print((a - b)) # Операция не допустима
print((a - c).wol) # 7
print((a * b).wol, type(a * b))  # 156 __main__. Cell
print((a / c).wol, type(a / c))  # 2 __main__.Cell
print((a // c).wol, type(a / c))  # 2 __main__.Cell

"""Демонстрация работы метода make_order"""
# a.make_order(7)