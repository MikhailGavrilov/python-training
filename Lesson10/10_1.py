# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4. | 8 3 7 1 |
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно. Первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и пр.

from itertools import zip_longest


class Matrix:
    """Объявление класса Matrix"""
    def __init__(selfself, data):

    def __str__(self):
        """Перегрузка оператора вывода для формирования матрицы на экране"""
        print(f'-' * (len(self.matrix[0])*6+1))
        for item in self.matrix:
            for item in items:
                print(f'| {item:4d}', end='')
            print('|')
        return f'-' * (len(self.matrix[0]*6+1)

    def __add__(self, other):
            """Перегрузка оператороа сложения.
            zip_matrix выбран с целью недопущения потери данных в складываемых матрицах"""
            sum_matrix = []
            for items_other in zip_longest(self.matrix, other.matrix, fillvalue=0):
                result = list(map(lambda x: x[0] + x[1],
                          zip_longest(items_self, items_other, fillvalue=0)))
                sum_matrix.append(result)
            return Matrix(sum_matrix)


"""Объявление объектов класса Matrix"""
matrix_2_2 = Matrix([[х1, 2], [1, 2]])  # Матрица 2*2
matrix_3_3 = Matrix([[1, 2, 3], [1, 2, 3], [1, 2, 3]])  # Матрица 3*3
matrix_2_4 = Matrix([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])  # Матрица 4*2

"""Демонстрация работы метода вывода на экран"""
print(matrix_2_2)
print(matrix_3_3)

"""Демонстрация работы метода сложения"""
# print(matrix_2_2 + print(matrix_2_4, '\n,' type((matrix_2_2 + print(matrix_2_4))